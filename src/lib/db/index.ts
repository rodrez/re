import Dexie, { Table } from 'dexie';

// Interface for Documents
interface Document {
    id?: number; // Auto-incremented primary key
    title: string;
    filePath: string; // Path to the stored file
    type: 'pdf' | 'text' | 'other'; // Type of the document
    importDate: Date;
    author?: string;
    summary?: string; // Generated by AI
}

// Interface for Categories
interface Category {
    id?: number; // Auto-incremented primary key
    name: string;
}

// Interface for the many-to-many relationship between Documents and Categories
interface DocumentCategory {
    documentId: number;
    categoryId: number;
}

// Interface for AI Models
interface Model {
    id?: number; // Auto-incremented primary key
    name: string;
    type: 'api' | 'local';
    config?: object; // Configuration settings for the model
}

// Interface for Interactions with Documents
interface Interaction {
    id?: number; // Auto-incremented primary key
    documentId: number;
    interactionType: 'view' | 'chat' | 'summarize' | 'suggestCategory' | 'suggestReadingOrder';
    timestamp: Date;
    duration?: number; // Duration in milliseconds
}

// Interface for Document Dependencies
interface Dependency {
    id?: number; // Auto-incremented primary key
    documentId: number; // The document that has a dependency
    dependsOnDocumentId: number; // The document it depends on
}

// Initialize Dexie database
const db = new Dexie('ResearchTrackingDatabase') as Dexie & {
    documents: Table<Document, number>;
    categories: Table<Category, number>;
    documentCategories: Table<DocumentCategory, [number, number]>;
    models: Table<Model, number>;
    interactions: Table<Interaction, number>;
    dependencies: Table<Dependency, number>;
};

// Define the schema for each table
db.version(1).stores({
    // Documents table with indexes on title, type, and importDate
    documents: '++id, title, type, importDate',

    // Categories table with index on name
    categories: '++id, name',

    // DocumentCategories join table with compound primary key on [documentId+categoryId]
    documentCategories: '[documentId+categoryId], documentId, categoryId',

    // Models table with indexes on name and type
    models: '++id, name, type',

    // Interactions table with indexes on documentId, interactionType, and timestamp
    interactions: '++id, documentId, interactionType, timestamp',

    // Dependencies table with compound primary key on [documentId+dependsOnDocumentId]
    dependencies: '[documentId+dependsOnDocumentId], documentId, dependsOnDocumentId'
});

// Open the database
db.open().catch((err) => {
    console.error("Failed to open db:", err.stack || err);
});

export type { Document, Category, DocumentCategory, Model, Interaction, Dependency };
export { db };